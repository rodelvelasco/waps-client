{"ast":null,"code":"import { takeLatest, put } from 'redux-saga/effects'; // import TOAST from '../../modules/toastManager';\n\nimport axios from 'axios';\nimport { handleSagaError } from '../../utils/helperFunctions';\nimport { DASHBOARD_ACTIONS, setGetDashboardSucceed, setGetDashboardFailure } from '../actions/dashboardAction';\nconst RESOURCE_PREFIX = 'http://localhost:3000/sensors/all';\nconst headers = {// 'Content-Type' : 'application/json'\n  // 'Authorization': `Bearer ${getAuthToken()}`\n};\n\nfunction* getDashboard(rqst) {\n  try {\n    console.log('getDashboard', rqst);\n    const response = yield axios.get(`${RESOURCE_PREFIX}`, rqst.payload, {\n      headers\n    });\n    console.log('[fetch dashboard data]', response);\n    yield put(setGetDashboardSucceed(response));\n  } catch (err) {\n    const error = handleSagaError(err);\n    yield put(setGetDashboardFailure(error.debug)); // TOAST.error(error.debug);\n  }\n}\n\nfunction* dashboardSagaWatcher() {\n  yield takeLatest(DASHBOARD_ACTIONS.ATTEMPT_TO_GET_DASHBOARD, getDashboard);\n}\n\nexport default dashboardSagaWatcher;","map":{"version":3,"sources":["/Users/rodel/coding/akin/kv-wasp-client/src/store/sagas/dashboardSaga.js"],"names":["takeLatest","put","axios","handleSagaError","DASHBOARD_ACTIONS","setGetDashboardSucceed","setGetDashboardFailure","RESOURCE_PREFIX","headers","getDashboard","rqst","console","log","response","get","payload","err","error","debug","dashboardSagaWatcher","ATTEMPT_TO_GET_DASHBOARD"],"mappings":"AAEA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,SACEC,iBADF,EAEEC,sBAFF,EAGEC,sBAHF,QAIO,4BAJP;AAOA,MAAMC,eAAe,GAAG,mCAAxB;AACA,MAAMC,OAAO,GAAG,CACd;AACA;AAFc,CAAhB;;AAMA,UAAUC,YAAV,CAAuBC,IAAvB,EAA6B;AAC3B,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,IAA5B;AACA,UAAMG,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAW,GAAEP,eAAgB,EAA7B,EAAgCG,IAAI,CAACK,OAArC,EAA6C;AAACP,MAAAA;AAAD,KAA7C,CAAvB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqCC,QAArC;AACA,UAAMZ,GAAG,CAACI,sBAAsB,CAACQ,QAAD,CAAvB,CAAT;AACD,GALD,CAKE,OAAOG,GAAP,EAAY;AACZ,UAAMC,KAAK,GAAGd,eAAe,CAACa,GAAD,CAA7B;AACA,UAAMf,GAAG,CAACK,sBAAsB,CAACW,KAAK,CAACC,KAAP,CAAvB,CAAT,CAFY,CAGZ;AACD;AACF;;AAED,UAAUC,oBAAV,GAAiD;AAC/C,QAAMnB,UAAU,CAACI,iBAAiB,CAACgB,wBAAnB,EAA6CX,YAA7C,CAAhB;AACD;;AAED,eAAeU,oBAAf","sourcesContent":["// @flow\n\nimport { takeLatest, put } from 'redux-saga/effects';\n// import TOAST from '../../modules/toastManager';\nimport axios from 'axios';\nimport { handleSagaError } from '../../utils/helperFunctions';\n\nimport {\n  DASHBOARD_ACTIONS,\n  setGetDashboardSucceed,\n  setGetDashboardFailure\n} from '../actions/dashboardAction';\n\n\nconst RESOURCE_PREFIX = 'http://localhost:3000/sensors/all';\nconst headers = {\n  // 'Content-Type' : 'application/json'\n  // 'Authorization': `Bearer ${getAuthToken()}`\n};\n\n\nfunction* getDashboard(rqst) {\n  try {\n    console.log('getDashboard', rqst);\n    const response = yield axios.get(`${RESOURCE_PREFIX}`, rqst.payload,{headers});\n    console.log('[fetch dashboard data]',response);\n    yield put(setGetDashboardSucceed(response));\n  } catch (err) {\n    const error = handleSagaError(err);\n    yield put(setGetDashboardFailure(error.debug));\n    // TOAST.error(error.debug);\n  }\n}\n\nfunction* dashboardSagaWatcher<T>(): Iterable<T> {\n  yield takeLatest(DASHBOARD_ACTIONS.ATTEMPT_TO_GET_DASHBOARD, getDashboard);\n}\n\nexport default dashboardSagaWatcher;\n"]},"metadata":{},"sourceType":"module"}