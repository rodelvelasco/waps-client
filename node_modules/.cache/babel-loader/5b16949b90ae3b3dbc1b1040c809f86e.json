{"ast":null,"code":"import { takeLatest, put } from 'redux-saga/effects'; // import TOAST from '../../modules/toastManager';\n\nimport axios from 'axios';\nimport { handleSagaError } from '../../utils/helperFunctions';\nimport { DASHBOARD_ACTIONS, setGetDashboardSucceed, setGetDashboardFailure } from '../actions/dashboardAction';\nconst RESOURCE_PREFIX = 'http://localhost:3000/sensors/all';\nconst headers = {// 'Content-Type' : 'application/json'\n  // 'Authorization': `Bearer ${getAuthToken()}`\n};\n\nfunction* getDashboard(rqst) {\n  try {\n    console.log('getDashboard', rqst);\n    var config = {\n      method: 'get',\n      url: 'http://localhost:3000/sensors/all',\n      headers: {}\n    };\n    axios(config).then(function (response) {\n      console.log(JSON.stringify(response.data));\n      put(setGetDashboardSucceed(response));\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } catch (err) {\n    const error = handleSagaError(err);\n    put(setGetDashboardFailure(error.debug)); // TOAST.error(error.debug);\n  }\n} // function* getDashboard(rqst) {\n//   try {\n//     console.log('getDashboard', rqst);\n//     const response = yield axios.get(`${RESOURCE_PREFIX}`, rqst.payload,{headers});\n//     console.log('[fetch dashboard data]',response);\n//     yield put(setGetDashboardSucceed(response));\n//   } catch (err) {\n//     const error = handleSagaError(err);\n//     yield put(setGetDashboardFailure(error.debug));\n//     // TOAST.error(error.debug);\n//   }\n// }\n\n\nfunction* dashboardSagaWatcher() {\n  yield takeLatest(DASHBOARD_ACTIONS.ATTEMPT_TO_GET_DASHBOARD, getDashboard);\n}\n\nexport default dashboardSagaWatcher;","map":{"version":3,"sources":["/Users/rodel/coding/akin/kv-wasp-client/src/store/sagas/dashboardSaga.js"],"names":["takeLatest","put","axios","handleSagaError","DASHBOARD_ACTIONS","setGetDashboardSucceed","setGetDashboardFailure","RESOURCE_PREFIX","headers","getDashboard","rqst","console","log","config","method","url","then","response","JSON","stringify","data","catch","error","err","debug","dashboardSagaWatcher","ATTEMPT_TO_GET_DASHBOARD"],"mappings":"AAEA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,SACEC,iBADF,EAEEC,sBAFF,EAGEC,sBAHF,QAIO,4BAJP;AAOA,MAAMC,eAAe,GAAG,mCAAxB;AACA,MAAMC,OAAO,GAAG,CACd;AACA;AAFc,CAAhB;;AAQA,UAAUC,YAAV,CAAuBC,IAAvB,EAA6B;AAC3B,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,IAA5B;AACA,QAAIG,MAAM,GAAG;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,GAAG,EAAE,mCAFM;AAGXP,MAAAA,OAAO,EAAE;AAHE,KAAb;AAMAN,IAAAA,KAAK,CAACW,MAAD,CAAL,CACCG,IADD,CACM,UAAUC,QAAV,EAAoB;AACxBN,MAAAA,OAAO,CAACC,GAAR,CAAYM,IAAI,CAACC,SAAL,CAAeF,QAAQ,CAACG,IAAxB,CAAZ;AACAnB,MAAAA,GAAG,CAACI,sBAAsB,CAACY,QAAD,CAAvB,CAAH;AACD,KAJD,EAKCI,KALD,CAKO,UAAUC,KAAV,EAAiB;AACtBX,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD,KAPD;AAQD,GAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZ,UAAMD,KAAK,GAAGnB,eAAe,CAACoB,GAAD,CAA7B;AACAtB,IAAAA,GAAG,CAACK,sBAAsB,CAACgB,KAAK,CAACE,KAAP,CAAvB,CAAH,CAFY,CAGZ;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAUC,oBAAV,GAAiD;AAC/C,QAAMzB,UAAU,CAACI,iBAAiB,CAACsB,wBAAnB,EAA6CjB,YAA7C,CAAhB;AACD;;AAED,eAAegB,oBAAf","sourcesContent":["// @flow\n\nimport { takeLatest, put } from 'redux-saga/effects';\n// import TOAST from '../../modules/toastManager';\nimport axios from 'axios';\nimport { handleSagaError } from '../../utils/helperFunctions';\n\nimport {\n  DASHBOARD_ACTIONS,\n  setGetDashboardSucceed,\n  setGetDashboardFailure\n} from '../actions/dashboardAction';\n\n\nconst RESOURCE_PREFIX = 'http://localhost:3000/sensors/all';\nconst headers = {\n  // 'Content-Type' : 'application/json'\n  // 'Authorization': `Bearer ${getAuthToken()}`\n};\n\n\n\n\nfunction* getDashboard(rqst) {\n  try {\n    console.log('getDashboard', rqst);\n    var config = {\n      method: 'get',\n      url: 'http://localhost:3000/sensors/all',\n      headers: { }\n    };\n    \n    axios(config)\n    .then(function (response) {\n      console.log(JSON.stringify(response.data));\n      put(setGetDashboardSucceed(response));\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  } catch (err) {\n    const error = handleSagaError(err);\n    put(setGetDashboardFailure(error.debug));\n    // TOAST.error(error.debug);\n  }\n}\n\n// function* getDashboard(rqst) {\n//   try {\n//     console.log('getDashboard', rqst);\n//     const response = yield axios.get(`${RESOURCE_PREFIX}`, rqst.payload,{headers});\n//     console.log('[fetch dashboard data]',response);\n//     yield put(setGetDashboardSucceed(response));\n//   } catch (err) {\n//     const error = handleSagaError(err);\n//     yield put(setGetDashboardFailure(error.debug));\n//     // TOAST.error(error.debug);\n//   }\n// }\n\nfunction* dashboardSagaWatcher<T>(): Iterable<T> {\n  yield takeLatest(DASHBOARD_ACTIONS.ATTEMPT_TO_GET_DASHBOARD, getDashboard);\n}\n\nexport default dashboardSagaWatcher;\n"]},"metadata":{},"sourceType":"module"}