{"ast":null,"code":"import { takeLatest, put } from 'redux-saga/effects'; // import TOAST from '../../modules/toastManager';\n\nimport axios from 'axios';\nimport { handleSagaError } from '../../utils/helperFunctions';\nimport { DASHBOARD_ACTIONS, setGetDashboardSucceed, setGetDashboardFailure } from '../actions/dashboardAction';\nconst RESOURCE_PREFIX = 'http://localhost:3000/sensors/all';\nconst headers = {\n  'Content-Type': 'application/json' // 'Authorization': `Bearer ${getAuthToken()}`\n\n};\n\nfunction* getDashboard(rqst) {\n  try {\n    const response = yield axios.post(`${RESOURCE_PREFIX}`, rqst.payload, {\n      headers\n    });\n    console.log('[fetch dashboard data]', response);\n    yield put(setGetDashboardSucceed(response));\n  } catch (err) {\n    const error = handleSagaError(err);\n    yield put(setGetDashboardFailure(error.debug)); // TOAST.error(error.debug);\n  }\n}\n\nfunction* dashboardSagaWatcher() {\n  yield takeLatest(DASHBOARD_ACTIONS.ATTEMPT_TO_GET_DASHBOARD, getDashboard);\n}\n\nexport default dashboardSagaWatcher;","map":{"version":3,"sources":["/Users/rodel/coding/akin/kv-wasp-client/src/store/sagas/dashboardSaga.js"],"names":["takeLatest","put","axios","handleSagaError","DASHBOARD_ACTIONS","setGetDashboardSucceed","setGetDashboardFailure","RESOURCE_PREFIX","headers","getDashboard","rqst","response","post","payload","console","log","err","error","debug","dashboardSagaWatcher","ATTEMPT_TO_GET_DASHBOARD"],"mappings":"AAEA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,SACEC,iBADF,EAEEC,sBAFF,EAGEC,sBAHF,QAIO,4BAJP;AAOA,MAAMC,eAAe,GAAG,mCAAxB;AAEA,MAAMC,OAAO,GAAG;AACd,kBAAiB,kBADH,CAEd;;AAFc,CAAhB;;AAKA,UAAUC,YAAV,CAAuBC,IAAvB,EAA6B;AAC3B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAY,GAAEL,eAAgB,EAA9B,EAAiCG,IAAI,CAACG,OAAtC,EAA8C;AAACL,MAAAA;AAAD,KAA9C,CAAvB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqCJ,QAArC;AACA,UAAMV,GAAG,CAACI,sBAAsB,CAACM,QAAD,CAAvB,CAAT;AACD,GAJD,CAIE,OAAOK,GAAP,EAAY;AACZ,UAAMC,KAAK,GAAGd,eAAe,CAACa,GAAD,CAA7B;AACA,UAAMf,GAAG,CAACK,sBAAsB,CAACW,KAAK,CAACC,KAAP,CAAvB,CAAT,CAFY,CAGZ;AACD;AACF;;AAED,UAAUC,oBAAV,GAAiD;AAC/C,QAAMnB,UAAU,CAACI,iBAAiB,CAACgB,wBAAnB,EAA6CX,YAA7C,CAAhB;AACD;;AAED,eAAeU,oBAAf","sourcesContent":["// @flow\n\nimport { takeLatest, put } from 'redux-saga/effects';\n// import TOAST from '../../modules/toastManager';\nimport axios from 'axios';\nimport { handleSagaError } from '../../utils/helperFunctions';\n\nimport {\n  DASHBOARD_ACTIONS,\n  setGetDashboardSucceed,\n  setGetDashboardFailure\n} from '../actions/dashboardAction';\n\n\nconst RESOURCE_PREFIX = 'http://localhost:3000/sensors/all';\n\nconst headers = {\n  'Content-Type' : 'application/json'\n  // 'Authorization': `Bearer ${getAuthToken()}`\n};\n\nfunction* getDashboard(rqst) {\n  try {\n    const response = yield axios.post(`${RESOURCE_PREFIX}`, rqst.payload,{headers});\n    console.log('[fetch dashboard data]',response);\n    yield put(setGetDashboardSucceed(response));\n  } catch (err) {\n    const error = handleSagaError(err);\n    yield put(setGetDashboardFailure(error.debug));\n    // TOAST.error(error.debug);\n  }\n}\n\nfunction* dashboardSagaWatcher<T>(): Iterable<T> {\n  yield takeLatest(DASHBOARD_ACTIONS.ATTEMPT_TO_GET_DASHBOARD, getDashboard);\n}\n\nexport default dashboardSagaWatcher;\n"]},"metadata":{},"sourceType":"module"}