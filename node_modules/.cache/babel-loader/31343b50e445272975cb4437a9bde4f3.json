{"ast":null,"code":"import { DASHBOARD_ACTIONS } from '../actions/dashboardAction';\nimport { ACTION_STATUSES } from '../../utils/constants';\n\nconst initialState = () => ({\n  dashboard: {\n    data: {},\n    status: null,\n    error: null\n  }\n});\n/*\r\nSearch dashboard\r\n */\n\n\nconst ATTEMPT_TO_GET_DASHBOARD = state => ({ ...state,\n  dashboard: {\n    status: ACTION_STATUSES.PENDING,\n    data: {},\n    error: null\n  }\n});\n\n_c = ATTEMPT_TO_GET_DASHBOARD;\n\nconst SET_GET_DASHBOARD_SUCCEED = (state, action) => ({ ...state,\n  dashboard: {\n    data: action.payload,\n    status: ACTION_STATUSES.SUCCEED,\n    error: null\n  }\n});\n\n_c2 = SET_GET_DASHBOARD_SUCCEED;\n\nconst SET_GET_DASHBOARD_FAILURE = state => ({ ...state,\n  dashboard: { ...state.dashboard,\n    status: ACTION_STATUSES.FAILED\n  }\n});\n\n_c3 = SET_GET_DASHBOARD_FAILURE;\n\nconst RESET_GET_DASHBOARD_STATE = state => ({ ...state,\n  dashboard: initialState().dashboard\n});\n\n_c4 = RESET_GET_DASHBOARD_STATE;\n\nconst reducer = (state = initialState(), action) => {\n  switch (action.type) {\n    case DASHBOARD_ACTIONS.ATTEMPT_TO_GET_DASHBOARD:\n      return ATTEMPT_TO_GET_DASHBOARD(state);\n\n    case DASHBOARD_ACTIONS.SET_GET_DASHBOARD_SUCCEED:\n      return SET_GET_DASHBOARD_SUCCEED(state, action);\n\n    case DASHBOARD_ACTIONS.SET_GET_DASHBOARD_FAILURE:\n      return SET_GET_DASHBOARD_FAILURE(state);\n\n    case DASHBOARD_ACTIONS.RESET_GET_DASHBOARD_STATE:\n      return RESET_GET_DASHBOARD_STATE(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ATTEMPT_TO_GET_DASHBOARD\");\n$RefreshReg$(_c2, \"SET_GET_DASHBOARD_SUCCEED\");\n$RefreshReg$(_c3, \"SET_GET_DASHBOARD_FAILURE\");\n$RefreshReg$(_c4, \"RESET_GET_DASHBOARD_STATE\");","map":{"version":3,"sources":["/Users/rodel/coding/akin/kv-wasp-client/src/store/reducers/dashboard.js"],"names":["DASHBOARD_ACTIONS","ACTION_STATUSES","initialState","dashboard","data","status","error","ATTEMPT_TO_GET_DASHBOARD","state","PENDING","SET_GET_DASHBOARD_SUCCEED","action","payload","SUCCEED","SET_GET_DASHBOARD_FAILURE","FAILED","RESET_GET_DASHBOARD_STATE","reducer","type"],"mappings":"AAEA,SAASA,iBAAT,QAAkC,4BAAlC;AACA,SAASC,eAAT,QAAgC,uBAAhC;;AAEA,MAAMC,YAAY,GAAG,OAAuB;AAE1CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,EADG;AAETC,IAAAA,MAAM,EAAE,IAFC;AAGTC,IAAAA,KAAK,EAAE;AAHE;AAF+B,CAAvB,CAArB;AAUA;AACA;AACA;;;AACA,MAAMC,wBAAwB,GAAIC,KAAD,KAA4B,EAC3D,GAAGA,KADwD;AAE3DL,EAAAA,SAAS,EAAE;AACTE,IAAAA,MAAM,EAAEJ,eAAe,CAACQ,OADf;AAETL,IAAAA,IAAI,EAAE,EAFG;AAGTE,IAAAA,KAAK,EAAE;AAHE;AAFgD,CAA5B,CAAjC;;KAAMC,wB;;AASN,MAAMG,yBAAyB,GAAG,CAACF,KAAD,EAAwBG,MAAxB,MAAgD,EAChF,GAAGH,KAD6E;AAEhFL,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAEO,MAAM,CAACC,OADJ;AAETP,IAAAA,MAAM,EAAEJ,eAAe,CAACY,OAFf;AAGTP,IAAAA,KAAK,EAAE;AAHE;AAFqE,CAAhD,CAAlC;;MAAMI,yB;;AASN,MAAMI,yBAAyB,GAAIN,KAAD,KAA4B,EAC5D,GAAGA,KADyD;AAE5DL,EAAAA,SAAS,EAAE,EACT,GAAGK,KAAK,CAACL,SADA;AAETE,IAAAA,MAAM,EAAEJ,eAAe,CAACc;AAFf;AAFiD,CAA5B,CAAlC;;MAAMD,yB;;AAON,MAAME,yBAAyB,GAAIR,KAAD,KAA4B,EAC5D,GAAGA,KADyD;AAE5DL,EAAAA,SAAS,EAAED,YAAY,GAAGC;AAFkC,CAA5B,CAAlC;;MAAMa,yB;;AAKN,MAAMC,OAAO,GAAG,CAACT,KAAgB,GAAGN,YAAY,EAAhC,EAAoCS,MAApC,KAA2D;AACzE,UAAQA,MAAM,CAACO,IAAf;AACE,SAAKlB,iBAAiB,CAACO,wBAAvB;AACE,aAAOA,wBAAwB,CAACC,KAAD,CAA/B;;AACF,SAAKR,iBAAiB,CAACU,yBAAvB;AACE,aAAOA,yBAAyB,CAACF,KAAD,EAAQG,MAAR,CAAhC;;AACF,SAAKX,iBAAiB,CAACc,yBAAvB;AACE,aAAOA,yBAAyB,CAACN,KAAD,CAAhC;;AACF,SAAKR,iBAAiB,CAACgB,yBAAvB;AACE,aAAOA,yBAAyB,CAACR,KAAD,CAAhC;;AAGF;AACE,aAAOA,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAeS,OAAf","sourcesContent":["import type { BaseAction } from '../types/Action';\r\nimport type { DashboardState } from '../types';\r\nimport { DASHBOARD_ACTIONS } from '../actions/dashboardAction';\r\nimport { ACTION_STATUSES } from '../../utils/constants';\r\n\r\nconst initialState = (): DashboardState => ({\r\n\r\n  dashboard: {\r\n    data: {},\r\n    status: null,\r\n    error: null\r\n  }\r\n});\r\n  \r\n\r\n/*\r\nSearch dashboard\r\n */\r\nconst ATTEMPT_TO_GET_DASHBOARD = (state: DashboardState) => ({\r\n  ...state,\r\n  dashboard: {\r\n    status: ACTION_STATUSES.PENDING,\r\n    data: {},\r\n    error: null\r\n  }\r\n});\r\n\r\nconst SET_GET_DASHBOARD_SUCCEED = (state: DashboardState, action: BaseAction) => ({\r\n  ...state,\r\n  dashboard: {\r\n    data: action.payload,\r\n    status: ACTION_STATUSES.SUCCEED,\r\n    error: null\r\n  }\r\n});\r\n\r\nconst SET_GET_DASHBOARD_FAILURE = (state: DashboardState) => ({\r\n  ...state,\r\n  dashboard: {\r\n    ...state.dashboard,\r\n    status: ACTION_STATUSES.FAILED\r\n  }\r\n});\r\nconst RESET_GET_DASHBOARD_STATE = (state: DashboardState) => ({\r\n  ...state,\r\n  dashboard: initialState().dashboard\r\n});\r\n\r\nconst reducer = (state: RateState = initialState(), action: BaseAction) => {\r\n  switch (action.type) {\r\n    case DASHBOARD_ACTIONS.ATTEMPT_TO_GET_DASHBOARD:\r\n      return ATTEMPT_TO_GET_DASHBOARD(state);\r\n    case DASHBOARD_ACTIONS.SET_GET_DASHBOARD_SUCCEED:\r\n      return SET_GET_DASHBOARD_SUCCEED(state, action);\r\n    case DASHBOARD_ACTIONS.SET_GET_DASHBOARD_FAILURE:\r\n      return SET_GET_DASHBOARD_FAILURE(state);\r\n    case DASHBOARD_ACTIONS.RESET_GET_DASHBOARD_STATE:\r\n      return RESET_GET_DASHBOARD_STATE(state);\r\n    \r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}