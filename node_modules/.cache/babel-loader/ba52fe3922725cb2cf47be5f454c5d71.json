{"ast":null,"code":"import { connect } from '../../../../../../../Library/Caches/typescript/2.9/node_modules/@types/react-redux';\nimport DashboardContainer from './DashboardContainer';\nimport { attemptToGetDashboard, resetGetDashboardState } from '../../../store/actions/dashboardAction';\nimport { dashboardStateSelector } from '../../../store/selectors/dashboardSelector';\n\nconst mapStateToProps = store => ({\n  dashboardState: dashboardStateSelector(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchDashboard: data => dispatch(attemptToGetDashboard(data)),\n  resetDashboard: () => dispatch(resetGetDashboardState())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardContainer);","map":{"version":3,"sources":["/Users/rodel/coding/akin/kv-wasp-client/src/Layouts/Pages/Dashboard/index.js"],"names":["connect","DashboardContainer","attemptToGetDashboard","resetGetDashboardState","dashboardStateSelector","mapStateToProps","store","dashboardState","mapDispatchToProps","dispatch","fetchDashboard","data","resetDashboard"],"mappings":"AACA,SAASA,OAAT,QAAwB,oFAAxB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,SAAQC,qBAAR,EAA8BC,sBAA9B,QACO,wCADP;AAEA,SACIC,sBADJ,QAEO,4CAFP;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,cAAc,EAAEH,sBAAsB,CAACE,KAAD;AADR,CAAL,CAA7B;;AAIA,MAAME,kBAAkB,GAAGC,QAAQ,KAAK;AACpCC,EAAAA,cAAc,EAAGC,IAAD,IAAUF,QAAQ,CAACP,qBAAqB,CAACS,IAAD,CAAtB,CADE;AAEpCC,EAAAA,cAAc,EAAE,MAAMH,QAAQ,CAACN,sBAAsB,EAAvB;AAFM,CAAL,CAAnC;;AAKA,eAAeH,OAAO,CAACK,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CP,kBAA7C,CAAf","sourcesContent":["// @flow\nimport { connect } from '../../../../../../../Library/Caches/typescript/2.9/node_modules/@types/react-redux';\nimport DashboardContainer from './DashboardContainer';\n\nimport {attemptToGetDashboard,resetGetDashboardState\n} from '../../../store/actions/dashboardAction';\nimport {\n    dashboardStateSelector\n} from '../../../store/selectors/dashboardSelector';\n\n\nconst mapStateToProps = store => ({\n    dashboardState: dashboardStateSelector(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchDashboard: (data) => dispatch(attemptToGetDashboard(data)),\n    resetDashboard: () => dispatch(resetGetDashboardState())   \n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardContainer);"]},"metadata":{},"sourceType":"module"}